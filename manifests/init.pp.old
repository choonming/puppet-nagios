#
class nagios::agent {
    # nagios::agent defines a nagios agent (i.e. the server that is being
    # monitored). It must be included in every server that needs to be
    # monitored, ideally as part of the base configuration. This is because
    # this class defines the Nagios_host resource, which the services checks
    # depend on.
    #
    # nagios::agent also installs NRPE, which is the nagios remote execution
    # plugin. This lets nagios run arbitrary commands on the monitored server
    # for checks. Docs @ http://nagios.sourceforge.net/docs/nrpe/NRPE.pdf
    #
    # TODO: add firewall rules [Done for 5666/nrpe - alvin]

    include nagios::plugins

    package { "nagios-nrpe-server":
        ensure => installed,
    }

    file { "/etc/nagios/nrpe_local.cfg":
        ensure  => absent,
    }

    file { "/etc/nagios/nrpe.cfg":
        source  => "puppet:///nagios/nrpe.cfg",
        require => Package["nagios-nrpe-server"],
        mode    => 0644 , 
        owner   => "root" ,
        group   => "root" ,
    }

    # custom written commands not available from /etc/nagios-plugins/config/
    file { "/etc/nagios-plugins/config/custom_commands.cfg":
        source  => "puppet:///nagios/custom_commands.cfg",
        require => Package["nagios-nrpe-server"],
        mode    => 0644 ,
        owner   => "root" ,
        group   => "root" ,
    }

    file { "/etc/nagios/nrpe.d":
        ensure  => directory,
        require => Package["nagios-nrpe-server"],
    }

    service { "nagios-nrpe-server":
        ensure      => running,
        require     => File["/etc/nagios/nrpe.cfg"],
        subscribe   => File["/etc/nagios/nrpe.cfg"],
        status      => "/usr/bin/test -d /proc/`cat /var/run/nrpe.pid`"
    }

    @@nagios_host { $fqdn:
        ensure      => present,
        address     => $fqdn,
        use         => "generic-host",
        tag         => $domain,
    }


    firewall { '100 nrpe':
      chain   => 'INPUT',
      action  => 'accept',
      proto   => 'tcp',
      dport   => '5666',
    }
#
#    iptables::rule { "nrpe":
#        rule    => $environment ? {
#            alpha => "-A SERVICES -p tcp --dport 5666 -j allow_from_alpha",
#            default => "-A SERVICES -p tcp --dport 5666 -j allow_from_monitoring",
#        }
#    }

}

class nagios::basechecks {
    # Base check class. 
    # will be included in base, so that all hosts have this
    # will specify all the definitions of all the checks for all the hosts. 
    # including regular active checks and nrpe checks. 
    # nrpe checks should also be defined in files/nrpe.cfg

    @@nagios_service { "check_ping_$fqdn" :
        host_name           => "$fqdn",
        use                 => "generic-service",
        check_command       => "check_ping!600,20%!1000,50%",
        service_description => "check_ping",
        tag                 => $domain,
     }

    @@nagios_service { "check_puppetd_lock_$fqdn":
        host_name           => "$fqdn",
        use                 => "generic-service",
        check_command       => "check_nrpe_1arg!check_puppetd_lock",
        service_description => "check_puppetd_lock",
        tag                 => $domain,
    }

    nagios::nrpe { "check_puppetd_lock":
        command => "check_puppetd_lock"
    }

    @@nagios_service { "check_disk_$fqdn":
        check_command       => "check_nrpe_1arg!check_disk",
        use                 => "generic-service",
        host_name           => $fqdn,
        service_description => "check_disk",
        tag                 => $domain,
    }

    nagios::nrpe { "check_disk" :
        command => "check_disk -w 20% -c 10% -l"
    }

    @@nagios_service { "check_load_$fqdn":
        check_command       => "check_nrpe_1arg!check_load",
        use                 => "generic-service",
        host_name           => $fqdn,
        service_description => "check_load",
        tag                 => $domain,
    }

    nagios::nrpe { "check_load" :
        command => "check_load -w8.0,7.5,7.0 -c10,9,8"
    }

    if $operatingsystem == "Debian" {
        @@nagios_service { "check_apt_upgrade_$fqdn":
            check_command       => "check_nrpe_1arg!check_apt_upgrade",
            use                 => "generic-service",
            host_name           => $fqdn,
            service_description => "check_apt_upgrade",
            tag                 => $domain,
            check_interval      => 60,
            retry_interval      => 60,
        }

        nagios::nrpe { "check_apt_upgrade" :
            command => "check_apt_upgrade --run-apt",
            sudo    => true,
        }
    }

}

class nagios::plugins {
    # nagios::plugins installs a bunch of nagios plugins. It also sets up
    # the /usr/lib/nagios/plugins directory to be synced from the puppetmasters
    # $env/modules/nagios/files/plugins directory. Custom nagios plugins should
    # therefore be put in this directory, and it will propagate to all servers.

    package { [ "nagios-plugins", "nagios-plugins-basic", "nagios-plugins-standard" ]:
        ensure => installed,
    }
    
    file { "/usr/lib/nagios/plugins":
        ensure  => directory,
        source  => "puppet:///nagios/plugins",
        recurse => true,
        ignore  => ".svn",
        require => Package["nagios-plugins"],
    }

    # required for "check_ps.sh"
    package { "bc":
        ensure  => installed,
    }

}

class nagios::base {
    # nagios::monitor defines a nagios server (the one that monitors stuff)
    # It takes advantage of puppet's collected resources, which lets other
    # puppet-managed servers configure this nagios monitor with the checks
    # that they need. Docs @ http://reductivelabs.com/trac/puppet/wiki/ExportedResources 
    #
    # Defined here is htpasswd.users, which contains the list of users
    # authorized to access nagios. Edit it in $env/modules/nagios/files/htpasswd.users

    package { [ "nagios3", "nagios-nrpe-plugin", "nsca" ]:
        ensure  => installed,
    }

    service { "nagios3":
        ensure      => running,
        require     => [ Package["nagios3"], Package["nagios-nrpe-plugin"] ],
    }

    exec { "reload-nagios":
        command     => "/etc/init.d/nagios3 reload",
        require     => Service["nagios3"],
        refreshonly => true,
    }

    exec { "reload-httpd":
        command     => "/etc/init.d/apache2 reload",
        refreshonly => true,
    }

#    file { "/etc/nagios3/htpasswd.users":
#        source  => "puppet:///nagios/htpasswd.users",
#        ensure  => present,
#        require => Package["nagios3"],
#	    notify  => Exec["reload-httpd"]
#    }

    file { "/etc/nagios3/conf.d/hosts.cfg":
        ensure  => present,
        mode    => 0644,
    }

    file { "/etc/nagios3/conf.d/services.cfg":
        ensure  => present,
        mode    => 0644,
    }

    firewall { '101 httpd':
      chain   => 'INPUT',
      action  => 'accept',
      proto   => 'tcp',
      dport   => '80',
    }

    file { "cgi.cfg" :
        name    => "/etc/nagios3/cgi.cfg",
        content => template("nagios/cgi.cfg.erb"),
        mode    => 644,
        notify  => Exec["reload-httpd"]
    }

#    file { "/etc/nagios3/commands.cfg":
#        source  => "puppet:///nagios/commands.cfg",
#        require => Package["nagios3"],
#        mode    => 0644,
#        owner   => "root",
#        group   => "root",
#        notify  => Exec["reload-nagios"],
#    }   

    nagios_command { 'check_http_alt':
      command_line  => "/usr/lib/nagios/plugins/check_http -H '$HOSTADDRESS$' -p '$ARG1$'  -u '$ARG2$'  -e 'HTTP/1.1 200 OK'",
      ensure  => 'present',
    }

#    file { "/etc/nagios3/conf.d/contacts_nagios2.cfg":
#        source  => "puppet:///nagios/contacts_nagios2.cfg",
#        require => Package["nagios3"],
#        mode    => 0644,
#        owner   => "root",
#        group   => "root",
#        notify  => Exec["reload-nagios"],
#    }

    nagios_contact { 'choonming':
      ensure  => present,
      alias   => 'CM',
      email   => 'choonming@olindata.com',
      host_notification_commands    => 'notify-service-by-email',
      service_notification_commands => 'notify-service-by-email',
      host_notification_period    => '24x7',
      service_notification_period => '24x7',
      host_notification_options     => 'd,r',
      service_notification_options  => 'w,c,u,r',
    }

    nagios_contactgroup { 'admins':
      ensure  => 'present',
      alias   => 'admin',
      members => 'choonming',
    }

    file {"/etc/nagios3/conf.d/generic-service_nagios2.cfg":
        source  => "puppet:///nagios/generic-service_nagios2.cfg",
        require => Package["nagios3"],
        mode    => 0644,
        owner   => "root",
        group   => "root",
        notify  => Exec["reload-nagios"],
    }

}
    
class nagios::monitor_private {

    if ($environment == "omega" ) {
        Nagios_host <<| tag == "localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_host <<| tag == "omega.localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_host <<| tag == "beta.localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_host <<| tag == "private.localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "omega.localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "beta.localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "private.localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

    }

    else {
        Nagios_host <<| tag == "alpha.localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "alpha.localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_host <<| tag == "office.localhost" |>> {
            target  => "/etc/nagios3/conf.d/hosts.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }

        Nagios_service <<| tag == "office.localhost" |>> {
            target  => "/etc/nagios3/conf.d/services.cfg",
            require => Package["nagios3"],
            notify  => Exec["reload-nagios"],
        }
    }
}

define nagios::nrpe($command, $sudo=false) {
    # nagios::nrpe defines a NRPE command for the nagios agent. For security
    # reasons, NRPE needs all commands that it can execute, to be specified in
    # its config file.
    #
    # Example usage:
    #
    #     nagios::nrpe { "check_something":
    #         command => "check_something -H localhost -x -d -w -q"
    #     }
    #
    #     @@nagios_service { "check_something_$fqdn": 
    #         check_command       => "check_nrpe_1arg!check_something",
    #         use                 => "generic-service",
    #         host_name           => $fqdn,
    #         service_description => "check_something",
    #     } 

    $sudo_command = $sudo ? {
                        true    => "/usr/bin/sudo ",
                        false   => "",
                    }

    file { "/etc/nagios/nrpe.d/$name.cfg":
        content => "command[$name]=$sudo_command/usr/lib/nagios/plugins/$command\n",
        require => Package["nagios-nrpe-server"],
        notify  => Service["nagios-nrpe-server"],
    }

}
